# KIP Production Deployment Configuration
# Kubernetes manifests for production-ready deployment

apiVersion: v1
kind: Namespace
metadata:
  name: kip-production
  labels:
    name: kip-production
    environment: production

---

# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kip-config
  namespace: kip-production
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  PORT: "8081"
  NEO4J_URI: "bolt://neo4j-cluster:7687"
  REDIS_URL: "redis://redis-cluster:6379"
  ENABLE_SEMANTIC_INDEXING: "true"
  ENABLE_ML_INTEGRATION: "true"
  ENABLE_PERFORMANCE_MONITORING: "true"
  ENABLE_QUERY_OPTIMIZATION: "true"
  ENABLE_ADVANCED_ANALYTICS: "true"
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"

---

# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: kip-secrets
  namespace: kip-production
type: Opaque
data:
  KIP_TOKEN: Y2hhbmdlbWUta2lwLXRva2Vu  # base64 encoded
  NEO4J_PASSWORD: Y2hhbmdlbWUtbmVvNGo=   # base64 encoded
  JWT_SECRET: c3VwZXItc2VjcmV0LWp3dC1rZXk=   # base64 encoded

---

# KIP Nexus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kip-nexus
  namespace: kip-production
  labels:
    app: kip-nexus
    tier: application
    version: phase8
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: kip-nexus
  template:
    metadata:
      labels:
        app: kip-nexus
        tier: application
        version: phase8
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: kip-nexus
        image: kip/nexus:phase8-latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8081
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: NEO4J_USER
          value: "neo4j"
        envFrom:
        - configMapRef:
            name: kip-config
        - secretRef:
            name: kip-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - kip-nexus
              topologyKey: kubernetes.io/hostname

---

# Service for KIP Nexus
apiVersion: v1
kind: Service
metadata:
  name: kip-nexus-service
  namespace: kip-production
  labels:
    app: kip-nexus
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
spec:
  type: LoadBalancer
  selector:
    app: kip-nexus
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  sessionAffinity: None

---

# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: kip-nexus-hpa
  namespace: kip-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: kip-nexus
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60

---

# Neo4j Cluster Configuration
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: neo4j-cluster
  namespace: kip-production
spec:
  serviceName: neo4j-cluster
  replicas: 3
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5.15-enterprise
        ports:
        - containerPort: 7474
          name: http
        - containerPort: 7687
          name: bolt
        - containerPort: 7473
          name: https
        - containerPort: 6362
          name: backup
        env:
        - name: NEO4J_AUTH
          value: "neo4j/changeme-neo4j"
        - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
          value: "yes"
        - name: NEO4J_dbms_mode
          value: "CORE"
        - name: NEO4J_dbms_cluster_discovery_type
          value: "K8S"
        - name: NEO4J_dbms_cluster_k8s_service__name
          value: "neo4j-cluster"
        - name: NEO4J_dbms_cluster_k8s_cluster__domain
          value: "cluster.local"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "2G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "2G"
        - name: NEO4J_dbms_memory_pagecache_size
          value: "1G"
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        - name: neo4j-logs
          mountPath: /logs
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "2000m"
  volumeClaimTemplates:
  - metadata:
      name: neo4j-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 100Gi
  - metadata:
      name: neo4j-logs
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard"
      resources:
        requests:
          storage: 10Gi

---

# Neo4j Service
apiVersion: v1
kind: Service
metadata:
  name: neo4j-cluster
  namespace: kip-production
spec:
  clusterIP: None
  selector:
    app: neo4j
  ports:
  - name: http
    port: 7474
  - name: bolt
    port: 7687
  - name: https
    port: 7473

---

# Redis Cluster Configuration
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: kip-production
spec:
  serviceName: redis-cluster
  replicas: 6
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: cluster
        command:
        - redis-server
        - /etc/redis/redis.conf
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 20Gi

---

# Redis Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: kip-production
data:
  redis.conf: |
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
    bind 0.0.0.0
    port 6379

---

# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: kip-production
spec:
  clusterIP: None
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
  - name: cluster
    port: 16379

---

# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kip-ingress
  namespace: kip-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.kip.dev
    secretName: kip-tls
  rules:
  - host: api.kip.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kip-nexus-service
            port:
              number: 80

---

# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kip-network-policy
  namespace: kip-production
spec:
  podSelector:
    matchLabels:
      app: kip-nexus
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kip-production
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8081
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kip-production
    ports:
    - protocol: TCP
      port: 7687  # Neo4j
    - protocol: TCP
      port: 6379  # Redis
  - to: []  # Allow all outbound (for external APIs)
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443

---

# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kip-nexus-metrics
  namespace: kip-production
  labels:
    app: kip-nexus
spec:
  selector:
    matchLabels:
      app: kip-nexus
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---

# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: kip-nexus-pdb
  namespace: kip-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: kip-nexus

---

# RBAC Configuration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kip-nexus
  namespace: kip-production

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kip-nexus-role
  namespace: kip-production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kip-nexus-rolebinding
  namespace: kip-production
subjects:
- kind: ServiceAccount
  name: kip-nexus
  namespace: kip-production
roleRef:
  kind: Role
  name: kip-nexus-role
  apiGroup: rbac.authorization.k8s.io